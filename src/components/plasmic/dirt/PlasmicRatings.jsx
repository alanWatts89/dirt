// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rEfCz2iwr7rKqS5mwAwHSJ
// Component: LN1oqcvcc_f0mJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_dirt.module.css"; // plasmic-import: rEfCz2iwr7rKqS5mwAwHSJ/projectcss
import sty from "./PlasmicRatings.module.css"; // plasmic-import: LN1oqcvcc_f0mJ/css
import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: xNzY4glCja1gZM/icon

export const PlasmicRatings__VariantProps = new Array("stars");

export const PlasmicRatings__ArgProps = new Array("numReviews");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRatings__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "stars",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stars
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstars_five]: hasVariant($state, "stars", "five"),
          [sty.rootstars_four]: hasVariant($state, "stars", "four"),
          [sty.rootstars_one]: hasVariant($state, "stars", "one"),
          [sty.rootstars_three]: hasVariant($state, "stars", "three"),
          [sty.rootstars_two]: hasVariant($state, "stars", "two"),
          [sty.rootstars_zero]: hasVariant($state, "stars", "zero")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(hasVariant($state, "stars", "zero") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__hclHa, {
              [sty.svgstars_five__hclHaMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_zero__hclHaRErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__sNicf, {
              [sty.svgstars_five__sNicfMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__sNicf4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_one__sNicfOlBgl]: hasVariant(
                $state,
                "stars",
                "one"
              ),

              [sty.svgstars_three__sNicfe7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two__sNicf4WZPt]: hasVariant(
                $state,
                "stars",
                "two"
              ),

              [sty.svgstars_zero__sNicfrErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___8W7OY, {
              [sty.svgstars_five___8W7OYMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four___8W7OY4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_one___8W7OYOlBgl]: hasVariant(
                $state,
                "stars",
                "one"
              ),

              [sty.svgstars_three___8W7OYe7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two___8W7OY4WZPt]: hasVariant(
                $state,
                "stars",
                "two"
              ),

              [sty.svgstars_zero___8W7OYrErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__lCp7, {
              [sty.svgstars_five__lCp7MrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__lCp74W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_one__lCp7OlBgl]: hasVariant($state, "stars", "one"),
              [sty.svgstars_three__lCp7E7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two__lCp74WZPt]: hasVariant($state, "stars", "two"),
              [sty.svgstars_zero__lCp7RErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__qG9Mk, {
              [sty.svgstars_five__qG9MkMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__qG9Mk4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_one__qG9MkOlBgl]: hasVariant(
                $state,
                "stars",
                "one"
              ),

              [sty.svgstars_three__qG9MkE7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two__qG9Mk4WZPt]: hasVariant(
                $state,
                "stars",
                "two"
              ),

              [sty.svgstars_zero__qG9MkRErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__sGa27, {
              [sty.svgstars_five__sGa27MrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__sGa274W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_one__sGa27OlBgl]: hasVariant(
                $state,
                "stars",
                "one"
              ),

              [sty.svgstars_three__sGa27E7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two__sGa274WZPt]: hasVariant(
                $state,
                "stars",
                "two"
              ),

              [sty.svgstars_zero__sGa27RErf3]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__prGu, {
              [sty.svgstars_five__prGuMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__prGu4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_three__prGuE7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              ),

              [sty.svgstars_two__prGu4WZPt]: hasVariant($state, "stars", "two")
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__coksY, {
              [sty.svgstars_five__coksYMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__coksY4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              ),

              [sty.svgstars_three__coksYe7Lec]: hasVariant(
                $state,
                "stars",
                "three"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__n7I9H, {
              [sty.svgstars_five__n7I9HMrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              ),

              [sty.svgstars_four__n7I9H4W0UO]: hasVariant(
                $state,
                "stars",
                "four"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant($state, "stars", "five") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__x0No2, {
              [sty.svgstars_five__x0No2MrqY9]: hasVariant(
                $state,
                "stars",
                "five"
              )
            })}
            role={"img"}
          />
        ) : null}
      </p.Stack>
      {p.renderPlasmicSlot({
        defaultContents: "(45 Review)",
        value: args.numReviews,
        className: classNames(sty.slotTargetNumReviews)
      })}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRatings__ArgProps,
          internalVariantPropNames: PlasmicRatings__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRatings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatings";
  } else {
    func.displayName = `PlasmicRatings.${nodeName}`;
  }
  return func;
}

export const PlasmicRatings = Object.assign(
  // Top-level PlasmicRatings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicRatings
    internalVariantProps: PlasmicRatings__VariantProps,
    internalArgProps: PlasmicRatings__ArgProps
  }
);

export default PlasmicRatings;
/* prettier-ignore-end */
